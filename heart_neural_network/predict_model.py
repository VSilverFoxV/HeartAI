import joblib
import numpy as np

# Загрузка модели из файла
model = joblib.load('heart_disease_model.joblib')

# Функция для ввода данных с клавиатуры
def input_data():
    print("Введите данные для предсказания риска сердечного приступа:")
    
    age = int(input("Возраст (в годах): "))
    sex = int(input("Пол: 1 - мужской, 0 - женский: "))
    cp = int(input("Тип боли в груди: 1 — Типичная стенокардия, 2 — Атипичная стенокардия, 3 — Боль не связана со стенокардией, 4 — Бессимптомно: "))
    trtbps = int(input("Артериальное давление в состоянии покоя(мм рт.ст.): "))
    chol = int(input("Уровень холестерина (мг/дл): "))
    fbs = int(input("Уровень сахара в крови: 1 - выше 120 мг/дл, 0 - ниже: "))
    restecg = int(input("Результаты электрокардиограммы: 0 — Норма, 1 — Аномалия волны ST-T (инверсия волны T и/или подъем/депрессия ST более 0,05 мВ), 2 — Признаки гипертрофии левого желудочка (по критериям Эстеса): "))
    thalachh = int(input("Максимальная частота сердечных сокращений (уд/мин): "))
    exng = int(input("Наличие физической нагрузки: 1 - да, 0 - нет: "))
    oldpeak = float(input("Депрессия ST (в мВ): "))
    slp = int(input("Наклон сегмента ST: 1 — Горизонтальный, 2 — Восходящий, 3 — Нисходящий: "))
    caa = int(input("Количество крупных сосудистых заболеваний: 0 — Ни один крупный сосуд не окрашен (норма), 1 — Окрашен один крупный сосуд, 2 — Окрашены два крупных сосуда, 3 — Окрашены три крупных сосуда: "))
    thall = int(input("Уровень талассемии (thall): 1 - нормальный, 2 - фиксированный дефект, 3 - обратимый дефект: "))
    
    return [age, sex, cp, trtbps, chol, fbs, restecg, thalachh, exng, oldpeak, slp, caa, thall]

# Получение данных от пользователя
user_data = input_data()

# Преобразуем данные в формат, который ожидает модель (нужно передать как двумерный массив)
user_data = np.array(user_data).reshape(1, -1)

# Предсказание (вероятность)
prediction_proba = model.predict_proba(user_data)

# Проверка порядка классов
print(f"Порядок классов: {model.classes_}")

# Вероятность риска сердечного приступа (результат = 1)
risk_probability = prediction_proba[0][model.classes_.tolist().index(1)]

# Разворот вероятности (отсутствие риска)
reversed_probability = 1 - risk_probability

print(f"Вероятность отсутствия сердечного приступа: {reversed_probability * 100:.2f}%")
